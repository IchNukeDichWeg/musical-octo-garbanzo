red_emoji = '🔴'
green_emoji = '✅'
footer_text = 'Modern Combat 5 Script | Version 5.6'

menu1Dict = {
    [1] = red_emoji,
    [2] = red_emoji,
    [3] = red_emoji,
    [4] = red_emoji,
    [5] = red_emoji,
    [6] = red_emoji,
    [7] = red_emoji,
    [8] = red_emoji,
    [9] = red_emoji,
    [10] = red_emoji,
    [11] = red_emoji,
    [12] = red_emoji,
    [13] = red_emoji,
    [14] = red_emoji
}

menu2Dict = {
    [1] = red_emoji,
    [2] = red_emoji,
    [3] = red_emoji,
    [4] = red_emoji,
    [5] = red_emoji,
    [6] = red_emoji,
    [7] = red_emoji,
    [8] = red_emoji
}

menu3Dict = {
    [1] = red_emoji,
    [2] = red_emoji,
    [3] = red_emoji,
    [4] = red_emoji
}

menu4Dict = {
    [1] = red_emoji,
    [2] = red_emoji,
    [3] = red_emoji,
    [4] = red_emoji
}

function Main()
    menu = gg.multiChoice({
        '🎯 | Enable Headshot Aimbot',
        '💎 | Core Menu',
        '👤 | Player Menu',
        '🔫 | Gun Menu',
        '🔧 | Misc Menu',
        '❌ | Exit the Script'
    },nil, footer_text)

    if menu == nil then else
    if menu[1] == true then Aimbot() end
    if menu[2] == true then CoreMenu() end
    if menu[3] == true then PlayerMenu() end
    if menu[4] == true then GunMenu() end
    if menu[5] == true then MiscMenu() end
    if menu[6] == true then Exit() end
    XGCK=-1
    end
end

function GunMenu()
    menu1 = gg.multiChoice({
        menu1Dict[1] .. ' | Grinder',
        menu1Dict[2] .. ' | Whisperer',
        menu1Dict[3] .. ' | Vice',
        menu1Dict[4] .. ' | Verr Power',
        menu1Dict[5] .. ' | Maelstrom',
        menu1Dict[6] .. ' | LSN 2SB',
        menu1Dict[7] .. ' | Spec 38A',
        menu1Dict[8] .. ' | RCF 08',
        menu1Dict[9] .. ' | VLI 35',
        menu1Dict[10] .. ' | MSG-33 (Freeze)',
        menu1Dict[11] .. ' | BSW 77',
        menu1Dict[12] .. ' | Buckshot',
        menu1Dict[13] .. ' | Judgement',
        menu1Dict[14] .. ' | Dread Eye',
        '🔙 | Back'
    },nil, footer_text)

    if menu1 == nil then else
    if menu1[1] == true then Grinder(1) end
    if menu1[2] == true then Whisperer(2) end
    if menu1[3] == true then Vice(3) end
    if menu1[4] == true then VerrPower(4) end
    if menu1[5] == true then Maelstrom(5) end
    if menu1[6] == true then LSN2SB(6) end
    if menu1[7] == true then Spec38A(7) end
    if menu1[8] == true then RCF08(8) end
    if menu1[9] == true then VLI35(9) end
    if menu1[10] == true then MSG33(10) end
    if menu1[11] == true then BSW77(11) end
    if menu1[12] == true then Buckshot(12) end
    if menu1[13] == true then Judgement(13) end
    if menu1[14] == true then DreadEye(14) end
    if menu1[15] == true then HOME() end
    GLWW=-1
    end
end

function PlayerMenu()
    menu2 = gg.multiChoice({
        menu2Dict[1] .. ' | Speed',
        menu2Dict[2] .. ' | Wallshoot (Verr Power, Spec 38A, RCF 08)',
        menu2Dict[3] .. ' | FOV (FOV has to be set too 75)',
        menu2Dict[4] .. ' | Underground',
        menu2Dict[5] .. ' | Fly',
        menu2Dict[6] .. ' | Hide Arm and Gun',
        menu2Dict[7] .. ' | Crosshair Hack',
        menu2Dict[8] .. ' | No Recoil',
        '🔙 | Back'
    },nil, footer_text)

    if menu2 == nil then else
    if menu2[1] == true then Speed(1) end
    if menu2[2] == true then Wallshoot(2) end
    if menu2[3] == true then FOV(3) end
    if menu2[4] == true then Underground(4) end
    if menu2[5] == true then Fly(5) end
    if menu2[6] == true then HideArmAndGun(6) end
    if menu2[7] == true then Crosshair(7) end
    if menu2[8] == true then NoRecoil(8) end
    if menu2[9] == true then HOME() end
    XGCK=-1
    end
end

function CoreMenu()
    menu3 = gg.multiChoice({
        menu3Dict[1] .. ' | Max Cores 1 (Sixth Sense)',
        menu3Dict[2] .. ' | Max Cores 2 (Improved Berserker, Undying, Seer)',
        menu3Dict[3] .. ' | Max Cores 3 (Evil Eye)',
        menu3Dict[4] .. ' | Max Cores 4 (Hair Trigger)',
        '🔙 | Back'
    }, nil, footer_text)

    if menu3 == nil then else
    if menu3[1] == true then CoreHack('37.0;38.0;39.0;40.0;41.0:97', 'Core Hack 1 (Sixth Sense)', '420454', 1) end -- value to display + 34.375 = value to input
    if menu3[2] == true then CoreHack('36.0;37.0;38.0;39.0;40.0:97', 'Core Hack 2 (Improved Berserker, Undying, Seer)', '420454', 2) end -- value + 34.375
    if menu3[3] == true then CoreHack2('36.0;36.5;37.0;37.5;38.0:97', '74.0;69.0;64.0;59.0;54.0:97', 'Core Hack 3 (Evil Eye)', '420454', '454', 3) end -- value + 34.375
    if menu3[4] == true then HairTrigger(42, 4) end
    if menu3[5] == true then HOME() end
    GLWW=-1
    end
end

function MiscMenu()
    menu4 = gg.multiChoice({
        menu4Dict[1] .. ' | Unlock Lucky Spin',
        menu4Dict[2] .. ' | Show All Weapons',
        menu4Dict[3] .. ' | Test Function',
        menu4Dict[4] .. ' | Sabre to Grinder',
        '🔙 | Back'
    }, nil, footer_text)

    if menu4 == nil then else
    if menu4[1] == true then LuckySpin(1) end
    if menu4[2] == true then ShowAllWeapons(2) end
    if menu4[3] == true then Test(3) end
    if menu4[4] == true then Sabre2Grinder(4) end
    if menu4[5] == true then HOME() end
    GLWW=-1
    end
end

gg.setRanges(gg.REGION_C_ALLOC)

function Aimbot()
    gg.setRanges(gg.REGION_C_ALLOC)
    gg.searchNumber('0.00499999989F;0.18000000715F;0.03999999911F', gg.TYPE_FLOAT) 
    gg.getResults(99999)
    gg.searchNumber('0.005F', gg.TYPE_FLOAT) 
    gg.getResults(99999)
    gg.editAll('9999.7', gg.TYPE_FLOAT)
    gg.clearResults()
    gg.toast('Aimbot ✅')
end

function Search(range, offset, value_type, results, name, newvalue, freeze)
    gg.setRanges(range)
    gg.searchNumber(offset, value_type)
    local t = gg.getResults(results)
    for i, v in ipairs(t) do
        if v.flags == value_type then
            v.name = name .. ' (' .. v.value .. ')'
            v.value = newvalue
            v.freeze = freeze
        end
    end
    gg.addListItems(t)
    t = nil
    gg.clearResults()
end

function CoreHack(core_range, name, value, index)
    Search(gg.REGION_C_ALLOC, core_range, gg.TYPE_FLOAT, 100000, name, value, true)
    gg.toast(name .. ' ✅')
    if menu3Dict[index] == red_emoji then
        menu3Dict[index] = green_emoji
    end
end

function CoreHack2(core_range1, core_range2, name, value1, value2, index)
    CoreHack(core_range1, '50% ' .. name, value1, index)
    Search(gg.REGION_C_ALLOC, core_range2, gg.TYPE_FLOAT, 100000, name, value2, true)
    gg.toast(name .. ' ✅')
end

function HairTrigger(default, index)
    local input = gg.prompt({'Increase Fire Rate (in %): [0; 100]'}, {default}, {'number'})
    if input == nil then
        return
    end
    local value = tonumber(input[1])
    if value < 1 or value > 100 then
        gg.toast('Value out of range. Default Value ('..default..') will be used.')
        value = default
    end
    value = value + 34
    gg.toast('Changing Fire Rate to '..(value - 34)..'%')
    CoreHack('36.0;38.0;40.0;42.0;44.0:97', 'Core Hack 4 (Hair Trigger)', tostring(value), index)
    if menu3Dict[index] == red_emoji then
        menu3Dict[index] = green_emoji
    end
end

function Speed(index)
    gg.setRanges(gg.REGION_C_ALLOC)
    gg.searchNumber('11.0;6.0;16.0;12.0;25.0;12.0:33', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
    gg.getResults(5000, nil, nil, nil, nil, nil, nil, nil, nil)
    gg.editAll('25', gg.TYPE_FLOAT)
    gg.clearResults()
    gg.toast('Speed ✅')
    if menu2Dict[index] == red_emoji then
        menu2Dict[index] = green_emoji
    end
end 

function FOV(index)
    -- gg.setRanges(gg.REGION_C_ALLOC)
    -- gg.searchNumber('0.11~0.111', gg.TYPE_DOUBLE)
    -- gg.getResults(99999)
    -- gg.editAll('2.75', gg.TYPE_DOUBLE)
    -- gg.clearResults()
    gg.setRanges(gg.REGION_C_ALLOC)
    if menu2Dict[index] == red_emoji then
        menu2Dict[index] = green_emoji
        gg.searchNumber('1.47058820724', gg.TYPE_FLOAT)
        gg.getResults(10)
        gg.editAll('2.30', gg.TYPE_FLOAT) -- fov you want = 0.01960 * fov
        gg.clearResults()
        gg.toast('FOV ✅')
    else
        menu2Dict[index] = red_emoji
        gg.searchNumber('2.30', gg.TYPE_FLOAT)
        gg.getResults(10)
        gg.editAll('1.47058820724', gg.TYPE_FLOAT) -- 75 FOV
        gg.clearResults()
        gg.toast('FOV ❌')
    end
end

function Wallshoot(index)
    gg.setRanges(gg.REGION_CODE_APP)
    if menu2Dict[index] == red_emoji then
        menu2Dict[index] = green_emoji
        gg.searchNumber('-0.0001', gg.TYPE_FLOAT)
        gg.getResults(10)
        gg.editAll('999', gg.TYPE_FLOAT)
        gg.clearResults()
        gg.toast('Wallshoot ✅')
    else
        menu2Dict[index] = red_emoji
        gg.searchNumber('999', gg.TYPE_FLOAT)
        gg.getResults(10)
        gg.editAll('-0.0001', gg.TYPE_FLOAT)
        gg.clearResults()
        gg.toast('Wallshoot ❌')
    end
end

function VerrPower(index)
    gg.setRanges(gg.REGION_C_ALLOC)
    gg.searchNumber('66.0;42.0;47.0;39.0;37.0;36.0:21', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
    gg.refineNumber('39', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
    local revert = gg.getResults(5000)
    for i, v in ipairs(revert) do
        if v.flags == gg.TYPE_FLOAT then
            v.name = 'Verr Power (No Cooldown)' .. ' (' .. v.value .. ')'
            v.value = '1000'
            v.freeze = true
        end
    end
    -- gg.editAll('1000', gg.TYPE_FLOAT)
    gg.addListItems(revert)
    revert = nil
    gg.clearResults()
    -- no cooldown
    gg.setRanges(gg.REGION_C_ALLOC)
    gg.searchNumber('1.0F;1.4012985e-45F;0.30000001192F;10.0F;0.5F:149', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
    gg.refineNumber('1', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
    local t = gg.getResults(100000)
    for i, v in ipairs(t) do
        if v.flags == gg.TYPE_FLOAT then
            v.name = 'Verr Power (No Cooldown)' .. ' (' .. v.value .. ')'
            v.value = '999999'
            v.freeze = true
        end
    end
    gg.addListItems(t)
    t = nil
    -- gg.editAll('999999', gg.TYPE_FLOAT)
    gg.clearResults()

    -- -- Damage
    -- gg.searchNumber("\"3.5F;0.5F;3.5F;0.75F;2.5F;1.0F;4.0F;0.1\"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
    -- gg.refineNumber("\"1\"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
    -- gg.getResults(99999)
    -- gg.editAll("9999.1000111", gg.TYPE_FLOAT)
    -- gg.clearResults()
    -- -- Damage
    -- gg.searchNumber("\"1.0F;1.4012985e-45F;0.30000001192F;10.0F;0.5F:149\"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
    -- gg.refineNumber("\"1\"", gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
    -- gg.getResults(99999)
    -- gg.editAll("9999.1011111", gg.TYPE_FLOAT)
    -- gg.clearResults()

    gg.setRanges(gg.REGION_C_ALLOC)
    gg.searchNumber('42.0;5 034.0;35.0;74.0;309.0;134.0;69.0;59.0;36.0;37.5;66.0:241', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
    gg.refineNumber('35', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
    local freeze=gg.getResults(10)
    for i, v in ipairs(freeze) do
        if v.flags==gg.TYPE_FLOAT then
            v.name = 'Verr Power (Fire Rate)' .. ' (' .. v.value .. ')'
            v.value = '99'
            v.freeze = true
        end
    end
    gg.addListItems(freeze)
    freeze = nil
    gg.clearResults()
    gg.toast('Verr Power ✅')
    if menu1Dict[index] == red_emoji then
        menu1Dict[index] = green_emoji
    end
end

function Grinder(index)
    gg.setRanges(gg.REGION_C_ALLOC)
    gg.searchNumber('35.0;69.0;42.0;34.0;37.0;55.0;36.0:37', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
    gg.refineNumber('35;42', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
    local t = gg.getResults(1000, nil, nil, nil, nil, nil, nil, nil, nil)
    for i, v in ipairs(t) do
        if v.flags == gg.TYPE_FLOAT then
            v.name = 'Grinder (Infinite Ammo + Fast Reload + Fire Rate)' .. ' (' .. v.value .. ')'
            v.value = '1000'
            v.freeze = true
        end
    end
    gg.addListItems(t)
    t = nil
    gg.clearResults()
    gg.toast('Grinder ✅')
    if menu1Dict[index] == red_emoji then
        menu1Dict[index] = green_emoji
    end
end

function Whisperer(index)
    gg.setRanges(gg.REGION_C_ALLOC)
    gg.searchNumber('95034.0;34.84999847412;234.0;134.0;114.0;104.0;154.0:141', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
    gg.refineNumber('34.84999847412', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
    revert = gg.getResults(1000, nil, nil, nil, nil, nil, nil, nil, nil)
    local t = gg.getResults(1000, nil, nil, nil, nil, nil, nil, nil, nil)
    for i, v in ipairs(t) do
        if v.flags == gg.TYPE_FLOAT then
            v.name = 'Whisperer (Fire Rate)' .. ' (' .. v.value .. ')'
            v.value = '36.4'
            v.freeze = true 
        end
    end
    gg.addListItems(t)
    t = nil
    gg.clearResults()
    gg.setRanges(gg.REGION_C_ALLOC)
    gg.searchNumber('41.0;35.0;62.0;49.0;49.0:17', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
    gg.refineNumber('49', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
    revert = gg.getResults(1000, nil, nil, nil, nil, nil, nil, nil, nil)
    local t = gg.getResults(1000, nil, nil, nil, nil, nil, nil, nil, nil)
    for i, v in ipairs(t) do
        if v.flags == gg.TYPE_FLOAT then
            v.name = 'Whisperer (Infinit Ammo)' .. ' (' .. v.value .. ')'
            v.value = '10000'
            v.freeze = true
        end
    end
    gg.addListItems(t)
    t = nil
    gg.clearResults()
    Search(gg.REGION_C_ALLOC, '43F;34F;34F;95034.0F;86F:17', gg.TYPE_FLOAT, 9999, 'Whisperer (Accuracy)', '1000', true)

    Search(gg.REGION_C_ALLOC, '49;35;34.15000152588F;41;35:17', gg.TYPE_FLOAT, 9999, 'Whisperer (Fast Reload)', '41', true)
    
    gg.toast('Whisperer ✅')
    if menu1Dict[index] == red_emoji then
        menu1Dict[index] = green_emoji
    end
end

function LSN2SB(index)
    gg.setRanges(gg.REGION_C_ALLOC)
    gg.searchNumber('64.0;34.09999847412;34.09999847412;35.0;36.0;74.0;74.0;34.0;74.0;36.0:41', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
    gg.refineNumber('35;74', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
    local t = gg.getResults(1000, nil, nil, nil, nil, nil, nil, nil, nil)
    for i, v in ipairs(t) do
        if v.flags == gg.TYPE_FLOAT then
            v.name = 'LSN-2SB (Fast Reload and Infinite Ammo)' .. ' (' .. v.value .. ')'
            v.value = '500034.59375'
            v.freeze = true
        end
    end
    gg.addListItems(t)
    t = nil
    gg.clearResults()
    gg.toast('LSN-2SB ✅')
    if menu1Dict[index] == red_emoji then
        menu1Dict[index] = green_emoji
    end
end

function Vice(index)
    gg.setRanges(gg.REGION_C_ALLOC)
    gg.searchNumber('35.0;49.0;54.0:9', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
    gg.refineNumber('54', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
    revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
    local t = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
    for i, v in ipairs(t) do
        if v.flags == gg.TYPE_FLOAT then
            v.name = 'Vice (Infinit Ammo)' .. ' (' .. v.value .. ')'
            v.value = '10000'
            v.freeze = true
        end
    end
    gg.addListItems(t)
    t = nil
    gg.clearResults()
    gg.setRanges(gg.REGION_C_ALLOC)
    gg.searchNumber('50034.0;130.0;35.0:9', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
    gg.refineNumber('35', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
    -- revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
    -- gg.editAll('35.9', gg.TYPE_FLOAT)
    -- revert = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
    local t = gg.getResults(50, nil, nil, nil, nil, nil, nil, nil, nil)
    for i, v in ipairs(t) do
        if v.flags == gg.TYPE_FLOAT then
            v.name = 'Vice (Fire Rate)' .. ' (' .. v.value .. ')'
            v.value = '35.90000152588'
            v.freeze = true
        end
    end
    gg.addListItems(t)
    t = nil
    gg.clearResults()
    gg.toast('Vice ✅')
    if menu1Dict[index] == red_emoji then
        menu1Dict[index] = green_emoji
    end
end

function RCF08(index)
    gg.setRanges(gg.REGION_C_ALLOC)
    gg.searchNumber('36.0;50.0;41.0:21', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
    gg.refineNumber('36', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
    revert = gg.getResults(999, nil, nil, nil, nil, nil, nil, nil, nil)
    local t = gg.getResults(999, nil, nil, nil, nil, nil, nil, nil, nil)
    for i, v in ipairs(t) do
        if v.flags == gg.TYPE_FLOAT then
            v.name = 'R.C.F.08 (Infinit Ammo)' .. ' (' .. v.value .. ')'
            v.value = '1000'
            v.freeze = true
        end
    end
    gg.addListItems(t)
    t = nil
    gg.clearResults()
    gg.setRanges(gg.REGION_C_ALLOC)
    gg.searchNumber('95034.0;36.5:9', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
    gg.refineNumber('36.5', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
    revert = gg.getResults(999, nil, nil, nil, nil, nil, nil, nil, nil)
    local t = gg.getResults(999, nil, nil, nil, nil, nil, nil, nil, nil)
    for i, v in ipairs(t) do
        if v.flags == gg.TYPE_FLOAT then
            v.name = 'R.C.F.08 (Fire Rate)' .. ' (' .. v.value .. ')'
            v.value = '37.5'
            v.freeze = true
        end
    end
    gg.addListItems(t)
    t = nil
    gg.clearResults()
    gg.toast('R.C.F.08 ✅')
    if menu1Dict[index] == red_emoji then
        menu1Dict[index] = green_emoji
    end
end

function VLI35(index)
    gg.setRanges(gg.REGION_C_ALLOC)
    gg.searchNumber('34.09999847412;35.0;69.0;64.0;34.0;98.0;43.0;57.0;34.95000076294:41', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
    gg.refineNumber('35;64', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
    revert = gg.getResults(500, nil, nil, nil, nil, nil, nil, nil, nil)
    local t = gg.getResults(500, nil, nil, nil, nil, nil, nil, nil, nil)
    for i, v in ipairs(t) do
        if v.flags == gg.TYPE_FLOAT then
            v.name = 'V.L.I.-35 (Infinit Ammo)' .. ' (' .. v.value .. ')'
            v.value = '10000'
            v.freeze = true
        end
    end
    gg.addListItems(t)
    t = nil
    gg.clearResults()
    gg.setRanges(gg.REGION_C_ALLOC)
    gg.searchNumber('95034.0;84.0;36.20000076294;40.0:13', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
    gg.refineNumber('36.20000076294', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
    revert = gg.getResults(500, nil, nil, nil, nil, nil, nil, nil, nil)
    local t = gg.getResults(500, nil, nil, nil, nil, nil, nil, nil, nil)
    for i, v in ipairs(t) do
        if v.flags == gg.TYPE_FLOAT then
            v.name = 'V.L.I.-35 (Fire Rate)' .. ' (' .. v.value .. ')'
            v.value = '36.8'
            v.freeze = true
        end
    end
    gg.addListItems(t)
    t = nil
    gg.clearResults()
    gg.toast('V.L.I.-35 ✅')
    if menu1Dict[index] == red_emoji then
        menu1Dict[index] = green_emoji
    end
end

function Spec38A(index)
    -- gg.searchNumber('59.0F;2114.0F;0.0F:159', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
    -- gg.refineNumber('59', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
    -- revert = gg.getListItems()
    -- local t = gg.getListItems()
    -- for i, v in ipairs(t) do
    --     if v.flags == gg.TYPE_FLOAT then
    --         v.value = '-159'
    --         v.freeze = false
    --         v.name = 'Spec-38A'
    --     end
    -- end
    -- gg.addListItems(t)
    -- t = nil
    -- gg.clearResults()
    gg.setRanges(gg.REGION_C_ALLOC)
    gg.searchNumber('121.0F;34.79999923706F;64.0F', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
    gg.refineNumber('34.79999923706', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
    local freeze=gg.getResults(100)
    for i, v in ipairs(freeze) do
        if v.flags==gg.TYPE_FLOAT then
            v.name = 'Spec-38A (Fire Rate)' .. ' (' .. v.value .. ')'
            v.value = '35.5' -- 35.5
            v.freeze = true
        end
    end
    gg.addListItems(freeze)
    gg.clearResults()
    gg.setRanges(gg.REGION_C_ALLOC)
    gg.searchNumber('59.0;154.0;124.0;39.0;36.0;37.5;64.0;35.0;54.0;35.0;64.0;34.0;49.0;66.0;42.0;60.0:93', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
    gg.refineNumber('59.0', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
    -- revert = gg.getResults(1000, nil, nil, nil, nil, nil, nil, nil, nil)
    local t = gg.getResults(1000, nil, nil, nil, nil, nil, nil, nil, nil)
    for i, v in ipairs(t) do
        if v.flags == gg.TYPE_FLOAT then
            v.name = 'Spec-38A (Speed)' .. ' (' .. v.value .. ')'
            v.value = '40'
            v.freeze = true
        end
    end
    gg.addListItems(t)
    t = nil
    gg.clearResults()

    Search(gg.REGION_C_ALLOC, '49;49;34;49:13', gg.TYPE_FLOAT, 9999, 'Spec-38A (Ammo)', '12050', true)

    Search(gg.REGION_C_ALLOC, '34.90000152588F;34.09999847412F;34.09999847412F;35:13', gg.TYPE_FLOAT, 9999, 'Spec-38A (Reload)', '40', true)

    Search(gg.REGION_C_ALLOC, '64;82;35;34;34;114;134:25', gg.TYPE_FLOAT, 9999, 'Spec-38A (Range + Damage)', '969', true)

    gg.toast('Spec-38A ✅')
    if menu1Dict[index] == red_emoji then
        menu1Dict[index] = green_emoji
    end
end

function HideArmAndGun(index)
    gg.setRanges(gg.REGION_C_ALLOC)
    gg.searchNumber('2000.0;0.00100000005:9', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
    gg.refineNumber('0.00100000005', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
    local t = gg.getResults(1000, nil, nil, nil, nil, nil, nil, nil, nil)
    for i, v in ipairs(t) do
        if v.flags == gg.TYPE_FLOAT then
            v.name = 'Hide Arms and Gun' .. ' (' .. v.value .. ')'
            v.value = '1000'
            v.freeze = true
        end
    end
    gg.addListItems(t)
    t = nil
    gg.clearResults()
    gg.toast('Hide Arms and Gun ✅')
    if menu2Dict[index] == red_emoji then
        menu2Dict[index] = green_emoji
    end
end

function Underground(index)
    gg.setRanges(gg.REGION_C_ALLOC)
    -- gg.searchNumber('1.59999847412F; 1.200000004768F; 0.80000001192F: 512', gg.TYPE_FLOAT)
    -- gg.getResults(99999)
    if menu2Dict[index] == red_emoji then
        menu2Dict[index] = green_emoji
        gg.searchNumber('1.200000004768', gg.TYPE_FLOAT)
        gg.getResults(99999)
        gg.editAll('-1.200000004768', gg.TYPE_FLOAT)
        gg.clearResults()
        gg.toast('Underground ✅')
    else
        menu2Dict[index] = red_emoji
        gg.searchNumber('-1.200000004768', gg.TYPE_FLOAT)
        gg.getResults(99999)
        gg.editAll('1.200000004768', gg.TYPE_FLOAT)
        gg.clearResults()
        gg.toast('Underground ❌')
    end
end

function Fly(index)
    gg.setRanges(gg.REGION_C_ALLOC)
    -- gg.searchNumber('1.59999847412F; 1.200000004768F; 0.80000001192F: 512', gg.TYPE_FLOAT)
    -- gg.getResults(99999)
    if menu2Dict[index] == red_emoji then
        menu2Dict[index] = green_emoji   
        gg.searchNumber('1.200000004768', gg.TYPE_FLOAT)
        gg.getResults(99999)
        gg.editAll('2.400000009536', gg.TYPE_FLOAT) -- 2.400000009536
        gg.clearResults()
        gg.toast('Fly ✅')
    else
        menu2Dict[index] = red_emoji
        gg.searchNumber('2.400000009536', gg.TYPE_FLOAT)
        gg.getResults(99999)
        gg.editAll('1.200000004768', gg.TYPE_FLOAT) -- 2.400000009536
        gg.clearResults()
        gg.toast('Fly ❌')
    end
end

function Maelstrom(index)
    gg.setRanges(gg.REGION_C_ALLOC)
    -- gg.searchNumber('35.0;233,377.0;233,568.0:45', gg.TYPE_FLOAT)
    -- gg.refineNumber('35', gg.TYPE_FLOAT)
    -- local t = gg.getResults(1)
    -- for i, v in ipairs(t) do
    --     if v.flags == gg.TYPE_FLOAT then
    --         v.value = '200'
    --         v.freeze = true
    --         v.name = 'Maelstrom (Fast Reload)'
    --     end
    -- end
    -- gg.addListItems(t)
    -- t = nil
    -- gg.clearResults()
    gg.searchNumber('36.0;233,377.0;233,568.0:241', gg.TYPE_FLOAT)
    gg.refineNumber('36', gg.TYPE_FLOAT)
    local t = gg.getResults(1)
    for i, v in ipairs(t) do
        if v.flags == gg.TYPE_FLOAT then
            v.name = 'Maelstrom (Fire Rate)' .. ' (' .. v.value .. ')'
            v.value = '333' -- 600
            v.freeze = true
        end
    end
    gg.addListItems(t)
    t = nil
    -- gg.clearResults()
    -- gg.searchNumber('39.0;49.0;44.0;54.0;233,377.0;233,568.0:165', gg.TYPE_FLOAT)
    -- gg.refineNumber('39;49;44;54', gg.TYPE_FLOAT)
    -- local t = gg.getResults(4)
    -- for i, v in ipairs(t) do
    --     if v.flags == gg.TYPE_FLOAT then
    --         v.value = '34'
    --         v.freeze = true
    --         v.name = 'Maelstrom'
    --     end
    -- end
    -- gg.addListItems(t)
    -- t = nil
    gg.clearResults()
    gg.searchNumber('51.0;233,377.0;233,568.0:41', gg.TYPE_FLOAT)
    gg.refineNumber('51', gg.TYPE_FLOAT)
    local t = gg.getResults(1)
    for i, v in ipairs(t) do
        if v.flags == gg.TYPE_FLOAT then
            v.name = 'Maelstrom (Ammo)' .. ' (' .. v.value .. ')'
            v.value = '42103' -- 10000000 69454
            v.freeze = true
        end
    end
    gg.addListItems(t)
    t = nil
    gg.clearResults()
    gg.toast('Maelstrom ✅')
    if menu1Dict[index] == red_emoji then
        menu1Dict[index] = green_emoji
    end
end

function LuckySpin(index)
    Search(gg.REGION_C_ALLOC, '3D; 12D; 20D; 10D; 65D; 60D; 0D:93', gg.TYPE_DWORD, 1000, 'Lucky Spin', '1', true)
    -- gg.setRanges(gg.REGION_C_ALLOC)
    -- gg.searchNumber('3D; 12D; 20D; 10D; 65D; 60D; 0D:93', gg.TYPE_DWORD)
    -- local t = gg.getResults(1000, nil, nil, nil, nil, nil, nil, nil, nil)
    -- for i, v in ipairs(t) do
    --     if v.flags == gg.TYPE_DWORD then
    --         v.name = 'Lucky Spin' .. ' (' .. v.value .. ')'
    --         v.value = '1'
    --         v.freeze = true
    --     end
    -- end
    -- gg.addListItems(t)
    -- t = nil
    -- gg.clearResults()
    gg.toast('Lucky Spin ✅')
    if menu4Dict[index] == red_emoji then
        menu4Dict[index] = green_emoji
    end
end

function MSG33(index)
    gg.setRanges(gg.REGION_C_ALLOC)
    gg.searchNumber("-2.64835626e-23;-1.0;40.0:65", gg.TYPE_FLOAT)
    gg.refineNumber("-2.64835626e-23", gg.TYPE_FLOAT)
    local t = gg.getResults(1)
    for i, v in ipairs(t) do
        if v.flags == gg.TYPE_FLOAT then
            v.name = 'MSG33 (Freeze)' .. ' (' .. v.value .. ')'
            v.value = "-5.39260972e-33"
            v.freeze = true
        end
    end
    gg.addListItems(t)
    t = nil
    gg.clearResults()
    gg.toast('MSG33 ✅')
    if menu1Dict[index] == red_emoji then
        menu1Dict[index] = green_emoji
    end
end

function BSW77(index)
    gg.setRanges(gg.REGION_C_ALLOC)
    gg.searchNumber('154.0;284.0;484.0;89.0;38.0;44.0;233,287.0;233,536.0;41.0:221', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
    gg.refineNumber('44', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
    local t = gg.getResults(100)
    for i, v in ipairs(t) do
        if v.flags == gg.TYPE_FLOAT then
            v.name = 'BSW77 (Infinit Ammo)' .. ' (' .. v.value .. ')'
            v.value = '200'
            v.freeze = true
        end
    end
    gg.addListItems(t)
    t = nil
    gg.clearResults()
    gg.setRanges(gg.REGION_C_ALLOC)
    gg.searchNumber('95,034.0;132.0;94.0;304.0;484.0;74.0;34.5;35.0;54.0;233,287.0;233,536.0:249', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
    gg.refineNumber('35', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
    local t = gg.getResults(5)
    for i, v in ipairs(t) do
        if v.flags == gg.TYPE_FLOAT then
            v.name = 'BSW77 (No Reload)' .. ' (' .. v.value .. ')'
            v.value = '99'
            v.freeze = true
        end
    end
    gg.addListItems(t)
    t = nil
    gg.clearResults()
    gg.setRanges(gg.REGION_C_ALLOC)
    gg.searchNumber('95,034.0;132.0;35.20000076294;284.0;484.0;89.0;34.5:165', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
    gg.refineNumber('35.20000076294', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
    local freeze=gg.getResults(100)
    for i, v in ipairs(freeze) do
        if v.flags == gg.TYPE_FLOAT then
            v.name = 'BSW77 (Fire Rate)' .. ' (' .. v.value .. ')'
            v.value = '45.20000076294'
            v.freeze = true
        end
    end
    gg.addListItems(freeze)
    gg.clearResults()
    gg.toast('BSW77 ✅')
    if menu1Dict[index] == red_emoji then
        menu1Dict[index] = green_emoji
    end
end

function Crosshair(index)
    gg.setRanges(gg.REGION_CODE_APP)
    if menu2Dict[index] == red_emoji then
        menu2Dict[index] = green_emoji
        gg.searchNumber("0.005", gg.TYPE_FLOAT)
        gg.getResults(1000)
        gg.editAll("0.00001", gg.TYPE_FLOAT)
        gg.clearResults()
        gg.toast('Crosshair ✅')
    else
        menu2Dict[index] = red_emoji
        gg.searchNumber("0.00001", gg.TYPE_FLOAT)
        gg.getResults(1000)
        gg.editAll("0.005", gg.TYPE_FLOAT)
        gg.clearResults()
        gg.toast('Crosshair ❌')
    end
end

function ShowAllWeapons(index)
    gg.setRanges(gg.REGION_C_ALLOC)
    if menu4Dict[index] == red_emoji then
        menu4Dict[index] = green_emoji
        gg.searchNumber("34", gg.TYPE_FLOAT)
        gg.getResults(10000)
        gg.editAll("35", gg.TYPE_FLOAT)
        gg.clearResults()
        gg.toast("Show All Weapons ✅")
    else
        menu4Dict[index] = red_emoji
        gg.searchNumber("35", gg.TYPE_FLOAT)
        gg.getResults(10000)
        gg.editAll("34", gg.TYPE_FLOAT)
        gg.clearResults()
        gg.toast("Show All Weapons ❌")
    end
end

function Buckshot(index)
    gg.setRanges(gg.REGION_C_ALLOC)
    gg.searchNumber('35.0F;54.0F;44.0F;34.0F;36.0F;59.0F;41.0F;43.0F:49', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
    gg.refineNumber('35', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
    local t = gg.getResults(100)
    for i, v in ipairs(t) do
        if v.flags == gg.TYPE_FLOAT then
            v.name = 'Buckshot (Fast Reload)' .. ' (' .. v.value .. ')'
            v.value = '1000'
            v.freeze = true
        end
    end
    gg.addListItems(t)
    t = nil
    gg.clearResults()
    gg.toast('Buckshot ✅')
    if menu1Dict[index] == red_emoji then
        menu1Dict[index] = green_emoji
    end
end

function Judgement(index)
    gg.setRanges(gg.REGION_C_ALLOC)
    gg.searchNumber('35.0F;43.0F;44.0F;34.0F;223.0F;39.0F;49.0F;36.0F:37', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
    gg.refineNumber('35', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
    local t = gg.getResults(100)
    for i, v in ipairs(t) do
        if v.flags == gg.TYPE_FLOAT then
            v.name = 'Judgement (Fast Reload)' .. ' (' .. v.value .. ')'
            v.value = '1000'
            v.freeze = true
        end
    end
    gg.addListItems(t)
    t = nil
    gg.clearResults()
    gg.toast('Judgement ✅')
    if menu1Dict[index] == red_emoji then
        menu1Dict[index] = green_emoji
    end
end

function DreadEye(index)
    gg.setRanges(gg.REGION_C_ALLOC)
    gg.searchNumber('34.5F;39.0F;59.0F;38.0F;35.0F;44.0F;54.0F;34.0F;36.0F;37.0F;34.90000152588F:77', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
    gg.refineNumber('35', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
    local t = gg.getResults(100)
    for i, v in ipairs(t) do
        if v.flags == gg.TYPE_FLOAT then
            v.name = 'Dread Eye (Fast Reload)' .. ' (' .. v.value .. ')'
            v.value = '1000'
            v.freeze = true
        end
    end
    gg.addListItems(t)
    t = nil
    gg.clearResults()
    gg.toast('Dread Eye ✅')
    if menu1Dict[index] == red_emoji then
        menu1Dict[index] = green_emoji
    end
end

function NoRecoil(index)
    gg.setRanges(gg.REGION_CODE_APP)
    gg.searchNumber("-0.001;-0.01", gg.TYPE_FLOAT)
    gg.getResults(99)
    gg.searchNumber("-0.001", gg.TYPE_FLOAT)
    gg.getResults(99)
    gg.editAll("-99999999999999999999999999", gg.TYPE_FLOAT)
    gg.clearResults()
    gg.searchNumber("-99999999999999999999999999;-0.01", gg.TYPE_FLOAT)
    gg.getResults(99)
    gg.searchNumber("-0.01", gg.TYPE_FLOAT)
    gg.getResults(99)
    gg.editAll("0", gg.TYPE_FLOAT)
    gg.clearResults()
    gg.setRanges(gg.REGION_CODE_APP)
    gg.searchNumber("-99999999999999999999999999", gg.TYPE_FLOAT)
    gg.getResults(99)
    gg.editAll("-0.001", gg.TYPE_FLOAT)
    gg.clearResults()
    gg.searchNumber("-99.99", gg.TYPE_FLOAT)
    gg.getResults(99)
    gg.editAll("-0.01", gg.TYPE_FLOAT)
    gg.clearResults()
    gg.toast('No Recoil ✅')
    if menu2Dict[index] == red_emoji then
        menu2Dict[index] = green_emoji
    end
end    

function Test(index)
    gg.toast('Test ✅')
    if menu4Dict[index] == red_emoji then
        menu4Dict[index] = green_emoji
    end
end

function Sabre2Grinder(index)
    Search(gg.REGION_C_ALLOC, '65, 142D; 27D; -1,754,263,279D :9', gg.TYPE_DWORD, 999, 'Sabre to Grinder', '-1,052,503,520', true)
    gg.toast('Sabre to Grinder ✅')
    if menu4Dict[index] == red_emoji then
        menu4Dict[index] = green_emoji
    end
end

function Exit()
    gg.clearResults()
    gg.skipRestoreState()
    os.exit()
    gg.setVisible(true)
end

function HOME()
    kele0=1
    Main()
    gg.clearResults()
end

while(true)do
if gg.isVisible(true) then
    XGCK=1
    gg.setVisible(false)
    end
if XGCK==1 then
    Main()
    end
end
