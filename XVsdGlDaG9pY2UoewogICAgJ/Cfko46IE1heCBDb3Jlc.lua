red_emoji = '🔴'
green_emoji = '✅'
cross_emoji = '❌'
footer_text = 'Modern Combat 5 Script | Version 7.0'

gg.clearResults()

function Timer(start_time, task_name)
    -- local start_time = os.clock()
    gg.toast(string.format(task_name .. ' took'..' %.2f', os.clock() - start_time)..' Seconds')
end

maskDict = {
    ['Zombie'] = '-3.78895212e37',
    ['Bounty Hunter'] = '-6.32314163e-32',
    ['Ronin'] = '-9.8787985e-34',
    ['Sapper'] = '-2.65321064e-25',
    ['Morph'] = '1.01272336e-24',
    ['Marauder'] = '2.45918562e-25',
    ['Commander'] = '-3.7527919e-36',
    ['Oni'] = '2.531709052E-25',
    ['Tracker'] = '-2.36796736E36',
    ['Ares'] = '-2.435835746E-34',
    ['Sniper'] = '-4.303473685E-24',
    ['Heavy'] = '-1.05041991E-27',
    ['Basic Assault'] = '-6.723432529E-26',
    ['Praetorian'] = '-3.805559646E-36',
    ['Paragon'] = '-1.580726192E-32',
    ['U.S Patriot'] = '-6.632778236E-26',
    ['Shibing'] = '1.62048454E-23',
    ['Scavenger'] = '6.147715678E-26',
    ['Supermarine'] = '-2.266632621E33',
    ['Plague Doctor'] = '-5.919758755E35',
    ['Clown'] = '3.33052552e25',
    ['Clown Makeup'] = '-3.37633777e25',
    ['Afro'] = '1.33224738e26',
    ['Tattoo Face'] = '-1.35057228e26',
    ['Fish Scales'] = '-5.4024378e26',
    ['Beaten Up'] = '-2.16103459e27'

}

weaponSwapDict = {
    ['Golden Grinder'] = '-1,052,503,520',
    ['Sabre'] = '-1,754,263,279',
    ['Compakt'] = '-1,874,849,519',
    ['Freeze Gun'] = '-1981808624',
    ['Pistols'] = '-1711271664',
    ['Maelstrom'] = '-1596977136',
    ['IMP 5'] = '-1773137648',
    ['Disconnect Weapon'] = '-1353711616',
}

menu1Dict = {
    [1] = red_emoji,
    [2] = red_emoji,
    [3] = red_emoji,
    [4] = red_emoji,
    [5] = red_emoji,
    [6] = red_emoji,
    [7] = red_emoji,
    [8] = red_emoji,
    [9] = red_emoji,
    [10] = red_emoji,
    [11] = red_emoji,
    [12] = red_emoji,
    [13] = red_emoji,
    [14] = red_emoji,
    [15] = red_emoji,
    [16] = red_emoji,
    [17] = red_emoji,
    [18] = red_emoji,
    [19] = red_emoji,
    [20] = red_emoji
}

menu2Dict = {
    [1] = red_emoji,
    [2] = red_emoji,
    [3] = red_emoji,
    [4] = red_emoji,
    [5] = red_emoji,
    [6] = red_emoji,
    [7] = red_emoji,
    [8] = red_emoji,
    [9] = red_emoji,
    [10] = red_emoji,
    [11] = red_emoji,
    [12] = red_emoji,
    [13] = red_emoji,
    [14] = red_emoji,
    [15] = red_emoji,
    [16] = red_emoji
}

menu3Dict = {
    [1] = red_emoji,
    [2] = red_emoji,
    [3] = red_emoji,
    [4] = red_emoji
}

menu4Dict = {
    [1] = red_emoji,
    [2] = red_emoji,
    [3] = red_emoji,
    [4] = red_emoji,
    [5] = red_emoji,
    [6] = red_emoji,
    [7] = red_emoji,
    [8] = red_emoji,
    [9] = red_emoji,
    [10] = red_emoji,
    [11] = red_emoji,
    [12] = red_emoji,
    [13] = red_emoji,
    [14] = red_emoji,
    [15] = red_emoji,
    [16] = red_emoji
}

menu5Dict = {
    [1] = red_emoji
}

menu6Dict = {
    [1] = red_emoji
}

function UpdateMenuDicts(table, menuDict)
    local l_index = 1
    for key, value in pairs(table) do
        menuDict[l_index] = red_emoji
        l_index = l_index + 1
    end
end

UpdateMenuDicts(maskDict, menu5Dict)
UpdateMenuDicts(weaponSwapDict, menu6Dict)

function Count_table_items(table)
    numItems = 0
    for k,v in pairs(table) do
        numItems = numItems + 1
    end
    return numItems
end

function CustomIterator(table)
    for key = 1, Count_table_items(table) do
        value = table[key]
    end
end

function CustomCountdown(Seconds)
    for key = 1, tonumber(Seconds) do
        gg.toast((Seconds + 1) - key .. ' Seconds left')
        gg.sleep(1000)
    end
end

function Main()
    gg.clearResults()
    menu = gg.multiChoice({
        '🎯 | Enable Headshot Aimbot',
        '💎 | Core Menu',
        '👤 | Player Menu',
        '🔫 | Gun Menu',
        '🔧 | Misc Menu',
        '🎭 | Mask Menu',
        '🔁 | Weapon Swap Menu',
        cross_emoji .. ' | Exit the Script'
    },nil, footer_text)

    if menu == nil then else
    if menu[1] == true then Aimbot() end
    if menu[2] == true then CoreMenu() end
    if menu[3] == true then PlayerMenu() end
    if menu[4] == true then GunMenu() end
    if menu[5] == true then MiscMenu() end
    if menu[6] == true then MaskMenu() end
    if menu[7] == true then WeaponSwapMenu() end
    if menu[8] == true then Exit() end
    XGCK=-1
    end
end

function GunMenu()
    gg.clearResults()
    menu1 = gg.multiChoice({
        menu1Dict[1] .. ' | Grinder',
        menu1Dict[2] .. ' | Whisperer',
        menu1Dict[3] .. ' | Verr Power',
        menu1Dict[4] .. ' | Maelstrom',
        menu1Dict[5] .. ' | Pistols to Freeze ❄️',
        menu1Dict[6] .. ' | RCF 08',
        menu1Dict[7] .. ' | Golden Grinder in Sabre',
        menu1Dict[8] .. ' | Golden Grinder in Compakt',
        menu1Dict[9] .. ' | Spec 38A',
        menu1Dict[10] .. ' | LSN 2SB',
        menu1Dict[11] .. ' | VLI 35',
        menu1Dict[12] .. ' | Vice',
        menu1Dict[13] .. ' | BSW 77',
        menu1Dict[14] .. ' | Buckshot',
        menu1Dict[15] .. ' | Judgement',
        menu1Dict[16] .. ' | Dread Eye',
        menu1Dict[17] .. ' | Bosk 3',
        menu1Dict[18] .. ' | L.A.K',
        menu1Dict[19] .. ' | KogV',
        menu1Dict[20] .. ' | MSG-33 (Freeze)',
        '🔙 | Back'
    },nil, footer_text)

    if menu1 == nil then else
    if menu1[1] == true then Grinder(1, menu1Dict) end
    if menu1[2] == true then Whisperer(2, menu1Dict) end
    if menu1[3] == true then VerrPower(3, menu1Dict) end
    if menu1[4] == true then Maelstrom(4, menu1Dict) end
    if menu1[5] == true then Pistols2Freeze(5, menu1Dict) end
    if menu1[6] == true then RCF08(6, menu1Dict) end
    if menu1[7] == true then GrinderInSabre(7, menu1Dict) end
    if menu1[8] == true then GrinderInCompakt(8, menu1Dict) end
    if menu1[9] == true then Spec38A(9, menu1Dict) end
    if menu1[10] == true then LSN2SB(10, menu1Dict) end
    if menu1[11] == true then VLI35(11, menu1Dict) end
    if menu1[12] == true then Vice(12, menu1Dict) end
    if menu1[13] == true then BSW77(13, menu1Dict) end
    if menu1[14] == true then Buckshot(14, menu1Dict) end
    if menu1[15] == true then Judgement(15, menu1Dict) end
    if menu1[16] == true then DreadEye(16, menu1Dict) end
    if menu1[17] == true then Bosk3(17, menu1Dict) end
    if menu1[18] == true then LAK(18, menu1Dict) end
    if menu1[19] == true then KogV(19, menu1Dict) end
    if menu1[20] == true then MSG33(20, menu1Dict) end
    if menu1[21] == true then HOME() end
    GLWW=-1
    end
end

function PlayerMenu()
    gg.clearResults()
    menu2 = gg.multiChoice({
        menu2Dict[1] .. ' | Speed',
        menu2Dict[2] .. ' | Wallshoot (Verr Power, Spec 38A, RCF 08)',
        menu2Dict[3] .. ' | No Recoil',
        menu2Dict[4] .. ' | Underground',
        menu2Dict[5] .. ' | Enter Walls',
        menu2Dict[6] .. ' | Aimbot 2',
        menu2Dict[7] .. ' | Fly',
        menu2Dict[8] .. ' | Hide Arm and Gun',
        menu2Dict[9] .. ' | FOV (FOV has to be set too 75)',
        menu2Dict[10] .. ' | Crosshair Hack',
        '🔙 | Back'
    },nil, footer_text)

    if menu2 == nil then else
    if menu2[1] == true then Speed(1, menu2Dict) end
    if menu2[2] == true then Wallshoot(2, menu2Dict) end
    if menu2[3] == true then NoRecoil(3, menu2Dict) end
    if menu2[4] == true then Underground(4, menu2Dict) end
    if menu2[5] == true then EnterWalls(5, menu2Dict) end
    if menu2[6] == true then Aimbot2(6, menu2Dict) end
    if menu2[7] == true then Fly(7, menu2Dict) end
    if menu2[8] == true then HideArmAndGun(8, menu2Dict) end
    if menu2[9] == true then FOV(9, menu2Dict) end
    if menu2[10] == true then Crosshair(10, menu2Dict) end
    if menu2[11] == true then HOME() end
    XGCK=-1
    end
end

function CoreMenu()
    gg.clearResults()
    menu3 = gg.multiChoice({
        menu3Dict[1] .. ' | Max Cores 1 (Sixth Sense)',
        menu3Dict[2] .. ' | Max Cores 2 (Improved Berserker, Undying, Seer)',
        menu3Dict[3] .. ' | Max Cores 3 (Evil Eye)',
        menu3Dict[4] .. ' | Max Cores 4 (Hair Trigger)',
        '🔙 | Back'
    }, nil, footer_text)

    if menu3 == nil then else
    if menu3[1] == true then CoreHack('37.0;38.0;39.0;40.0;41.0:97', 'Core Hack 1 (Sixth Sense)', '420454', 1, menu3Dict) end -- value to display + 34.375 = value to input
    if menu3[2] == true then CoreHack('36.0;37.0;38.0;39.0;40.0:97', 'Core Hack 2 (Improved Berserker, Undying, Seer)', '420454', 2, menu3Dict) end -- value + 34.375
    -- if menu3[3] == true then CoreHack2('36.0;36.5;37.0;37.5;38.0:97', '74.0;69.0;64.0;59.0;54.0:97', 'Core Hack 3 (Evil Eye)', '420454', '454', 3, menu3Dict) end -- value + 34.375
    if menu3[3] == true then CoreHack('36.0;36.5;37.0;37.5;38.0:97', 'Core Hack 3 (Evil Eye)', '420454', 3, menu3Dict) end -- value + 34.375
    if menu3[4] == true then HairTrigger(42, 4, menu3Dict) end
    if menu3[5] == true then HOME() end
    GLWW=-1
    end
end

function MiscMenu()
    gg.clearResults()
    menu4 = gg.multiChoice({
        menu4Dict[1] .. ' | Unlock Lucky Spin',
        menu4Dict[2] .. ' | Show All Weapons',
        menu4Dict[3] .. ' | Test',
        '🔙 | Back'
    }, nil, footer_text)

    if menu4 == nil then else
    if menu4[1] == true then LuckySpin(1, menu4Dict) end
    if menu4[2] == true then ShowAllWeapons(2, menu4Dict) end
    if menu4[3] == true then Test(3, menu4Dict) end
    if menu4[4] == true then HOME() end
    GLWW=-1
    end
end

function MaskMenu()
    gg.clearResults()
    local index = 1
    local choiceMenu = {}
    local valueDict = {}
    local nameDict = {}
    for key, value in pairs(maskDict) do
        valueDict[index] = value
        nameDict[index] = key
        table.insert(choiceMenu, menu5Dict[index] .. ' | ' .. tostring(key))
        index = index + 1
    end

    table.insert(choiceMenu, '🔙 | Back')

    menu5 = gg.choice(choiceMenu, nil, footer_text)

    if menu5 == nil then else
    if menu5 == #choiceMenu then HOME() end
    if menu5 ~= #choiceMenu then MaskChange(menu5, valueDict[menu5], menu5Dict, nameDict[menu5]) end
    GLWW=-1
    end
end

function WeaponSwapMenu()
    gg.clearResults()
    local index = 1
    local choiceMenu = {}
    Index_to_key = {}
    for key, value in pairs(weaponSwapDict) do
        Index_to_key[index] = key
        table.insert(choiceMenu, menu6Dict[index] .. ' | ' .. tostring(key))
        index = index + 1
    end

    table.insert(choiceMenu, '🔙 | Back')

    menu6 = gg.choice(choiceMenu, nil, footer_text .. ' | Weapon Swap ??? in ???')

    if menu6 == nil then else
    if menu6 == #choiceMenu then HOME() end
    if menu6 ~= #choiceMenu then WeaponSwapMenu2(menu6, Index_to_key) end
    GLWW=-1
    end
end

function WeaponSwapMenu2(menu6, index_to_key)
    gg.clearResults()
    local index = 1
    local choiceMenu = {}
    for key, value in pairs(weaponSwapDict) do
        table.insert(choiceMenu, menu6Dict[index] .. ' | ' .. tostring(key))
        index = index + 1
    end

    table.insert(choiceMenu, '🔙 | Back')
    
    menu6_1 = gg.choice(choiceMenu,nil, footer_text .. ' |  Weapon Swap ' .. index_to_key[menu6] .. ' in ???')

    if menu6_1 == nil then else
    if menu6_1 == #choiceMenu then WeaponSwapMenu() end
    if menu6_1 ~= #choiceMenu then WeaponSwap(index_to_key[menu6], index_to_key[menu6_1]) end
    GLWW=-1
    end
end

function Aimbot()
    SearchRef(gg.REGION_C_ALLOC, '0.00499999989F;0.18000000715F;0.03999999911F', '0.005F', gg.TYPE_FLOAT, 9999, 'Aimbot', '9999.7', true)
    -- gg.setRanges(gg.REGION_C_ALLOC)
    -- gg.searchNumber('0.00499999989F;0.18000000715F;0.03999999911F', gg.TYPE_FLOAT) 
    -- gg.getResults(99999)
    -- gg.searchNumber('0.005F', gg.TYPE_FLOAT) 
    -- gg.getResults(99999)
    -- gg.editAll('9999.7', gg.TYPE_FLOAT)
    -- gg.clearResults()
    gg.toast('Aimbot ' .. green_emoji)
end

function Aimbot2(index, correct_dict)
    SearchRef(gg.REGION_C_ALLOC, '0.00499999989F;0.18000000715F;0.03999999911F;0.1', '0.1', gg.TYPE_FLOAT, 1000, 'Aimbot 2', '0.9', true)
    -- gg.setRanges(gg.REGION_C_ALLOC)
    -- gg.searchNumber('0.00499999989F;0.18000000715F;0.03999999911F;0.1', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
    -- gg.refineNumber('0.1', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1)
    -- gg.getResults(1000)
    -- gg.editAll('0.9', gg.TYPE_FLOAT)
    gg.toast('Aimbot 2 ' .. green_emoji)
    if correct_dict[index] == red_emoji then
        correct_dict[index] = green_emoji
    end
end

function EnterWalls(index, correct_dict)
    -- SearchRef(gg.REGION_C_ALLOC, '0.5F;16.0F;35.0F;30.0F;15.0F:97', '0.5', gg.TYPE_FLOAT, 100, 'Enter Wall', '-0.0530000008', false)

    SearchRef(gg.REGION_CODE_APP, '0.10000000149;-0.10000000149:5', '0.10000000149', gg.TYPE_FLOAT, 1, 'Enter Wall', '1000', false)

    -- gg.setRanges(gg.REGION_C_ALLOC)
    -- gg.searchNumber('0.5F;16.0F;35.0F;30.0F;15.0F:97', gg.TYPE_FLOAT)
    -- gg.refineNumber('0.5', gg.TYPE_FLOAT)
    -- gg.getResults(100)
    -- gg.editAll('-0.0530000008', gg.TYPE_FLOAT)
    -- gg.clearResults()
    gg.toast('Enter Wall ' .. green_emoji)
    if correct_dict[index] == red_emoji then
        correct_dict[index] = green_emoji
    end
end

function Search(range, offset, value_type, results, name, newvalue, freeze)
    local start_time = os.clock()
    gg.setRanges(range)
    gg.searchNumber(offset, value_type)
    local t = gg.getResults(results)
    for i, v in ipairs(t) do
        if v.flags == value_type then
            v.name = name .. ' (' .. v.value .. ')'
            v.value = newvalue
            v.freeze = freeze
        end
    end
    gg.addListItems(t)
    t = nil
    gg.clearResults()
    Timer(start_time, name)
end

function EditSavedValues()
    local items = gg.getListItems()
    for i, v in ipairs(items) do
    v.value = '123' -- new value
    end
    gg.setValues(items)
end

function SearchRef(range, offset, offset2, value_type, results, name, newvalue, freeze)
    local start_time = os.clock()
    gg.setRanges(range)
    gg.searchNumber(offset, value_type)
    gg.refineNumber(offset2, value_type)
    local t = gg.getResults(results)
    for i, v in ipairs(t) do
        if v.flags == value_type then
            v.name = name .. ' (' .. v.value .. ')'
            v.value = newvalue
            v.freeze = freeze
        end
    end
    gg.addListItems(t)
    t = nil
    gg.clearResults()
    Timer(start_time, name)
end

function CoreHack(core_range, name, value, index, correct_dict)
    Search(gg.REGION_C_ALLOC, core_range, gg.TYPE_FLOAT, 100000, name, value, true)
    gg.toast(name .. ' ' .. green_emoji)
    if correct_dict[index] == red_emoji then
        correct_dict[index] = green_emoji
    end
end

function CoreHack2(core_range1, core_range2, name, value1, value2, index, correct_dict)
    CoreHack(core_range1, '50% ' .. name, value1, index, correct_dict)
    Search(gg.REGION_C_ALLOC, core_range2, gg.TYPE_FLOAT, 100000, name, value2, true)
    gg.toast(name .. ' ' .. green_emoji)
end

function HairTrigger(default, index, correct_dict)
    local input = gg.prompt({'Increase Fire Rate (in %): [0; 100]'}, {default}, {'number'})
    if input == nil then
        return
    end
    local value = tonumber(input[1])
    if value < 1 or value > 100 then
        gg.toast('Value out of range. Default Value ('..default..') will be used.')
        value = default
    end
    value = value + 34
    gg.toast('Changing Fire Rate to '..(value - 34)..'%')
    CoreHack('36.0;38.0;40.0;42.0;44.0:97', 'Core Hack 4 (Hair Trigger)', tostring(value), index)
    if correct_dict[index] == red_emoji then
        correct_dict[index] = green_emoji
    end
end

function Speed(index, correct_dict)
    Search(gg.REGION_C_ALLOC, '11.0;6.0;16.0;12.0;25.0;12.0:33', gg.TYPE_FLOAT, 5000, 'Speed', '25', true)
    -- gg.setRanges(gg.REGION_C_ALLOC)
    -- gg.searchNumber('11.0;6.0;16.0;12.0;25.0;12.0:33', gg.TYPE_FLOAT, false, gg.SIGN_EQUAL, 0, -1, 0)
    -- gg.getResults(5000, nil, nil, nil, nil, nil, nil, nil, nil)
    -- gg.editAll('25', gg.TYPE_FLOAT)
    -- gg.clearResults()
    gg.toast('Speed ' .. green_emoji)
    if correct_dict[index] == red_emoji then
        correct_dict[index] = green_emoji
    end
end 

function FOV(index, correct_dict)
    -- gg.setRanges(gg.REGION_C_ALLOC)
    -- gg.searchNumber('0.11~0.111', gg.TYPE_DOUBLE)
    -- gg.getResults(99999)
    -- gg.editAll('2.75', gg.TYPE_DOUBLE)
    -- gg.clearResults()
    gg.setRanges(gg.REGION_C_ALLOC)
    if correct_dict[index] == red_emoji then
        correct_dict[index] = green_emoji
        gg.searchNumber('1.47058820724', gg.TYPE_FLOAT)
        gg.getResults(10)
        gg.editAll('2.30', gg.TYPE_FLOAT) -- fov you want = 0.01960 * fov
        gg.clearResults()
        gg.toast('FOV ' .. green_emoji)
    else
        correct_dict[index] = red_emoji
        gg.searchNumber('2.30', gg.TYPE_FLOAT)
        gg.getResults(10)
        gg.editAll('1.47058820724', gg.TYPE_FLOAT) -- 75 FOV
        gg.clearResults()
        gg.toast('FOV ' .. cross_emoji)
    end
end

function Wallshoot(index, correct_dict)
    gg.setRanges(gg.REGION_CODE_APP)
    if correct_dict[index] == red_emoji then
        correct_dict[index] = green_emoji
        gg.searchNumber('-0.0001', gg.TYPE_FLOAT)
        gg.getResults(10)
        gg.editAll('999', gg.TYPE_FLOAT)
        gg.clearResults()
        gg.toast('Wallshoot ' .. green_emoji)
    else
        correct_dict[index] = red_emoji
        gg.searchNumber('999', gg.TYPE_FLOAT)
        gg.getResults(10)
        gg.editAll('-0.0001', gg.TYPE_FLOAT)
        gg.clearResults()
        gg.toast('Wallshoot ' .. cross_emoji)
    end
end

function VerrPower(index, correct_dict)
    SearchRef(gg.REGION_C_ALLOC, '66.0;42.0;47.0;39.0;37.0;36.0:21', '39', gg.TYPE_FLOAT, 5000, 'Verr Power (No Cooldown)', '1000', true)

    SearchRef(gg.REGION_C_ALLOC, '1.0F;1.4012985e-45F;0.30000001192F;10.0F;0.5F:149', '1', gg.TYPE_FLOAT, 100000, 'Verr Power (No Cooldown)', '999999', true)

    SearchRef(gg.REGION_C_ALLOC, '42.0;5034.0;35.0;74.0;309.0;134.0;69.0;59.0;36.0;37.5;66.0:241', '35', gg.TYPE_FLOAT, 10, 'Verr Power (Fire Rate)', '99', true)

    gg.toast('Verr Power ' .. green_emoji)
    if correct_dict[index] == red_emoji then
        correct_dict[index] = green_emoji
    end
end

function Grinder(index, correct_dict)
    SearchRef(gg.REGION_C_ALLOC, '35.0;69.0;42.0;34.0;37.0;55.0;36.0:37', '35;42', gg.TYPE_FLOAT, 1000, 'Grinder (Infinite Ammo + Fast Reload + Fire Rate)', '1000', true)
    
    gg.toast('Grinder ' .. green_emoji)
    if correct_dict[index] == red_emoji then
        correct_dict[index] = green_emoji
    end
end

function Whisperer(index, correct_dict)
    SearchRef(gg.REGION_C_ALLOC,'95034.0;34.84999847412;234.0;134.0;114.0;104.0;154.0:141', '34.84999847412', gg.TYPE_FLOAT, 1000, 'Whisperer (Fire Rate)', '36.4', true)
    
    SearchRef(gg.REGION_C_ALLOC, '41.0;35.0;62.0;49.0;49.0:17', '49', gg.TYPE_FLOAT, 1000, 'Whisperer (Infinit Ammo)', '10000', true)
    
    Search(gg.REGION_C_ALLOC, '43F;34F;34F;95034.0F;86F:17', gg.TYPE_FLOAT, 9999, 'Whisperer (Accuracy)', '1000', true)

    Search(gg.REGION_C_ALLOC, '49;35;34.15000152588F;41;35:17', gg.TYPE_FLOAT, 9999, 'Whisperer (Fast Reload)', '41', true)

    gg.toast('Whisperer ' .. green_emoji)
    if correct_dict[index] == red_emoji then
        correct_dict[index] = green_emoji
    end
end

function LSN2SB(index, correct_dict)
    SearchRef(gg.REGION_C_ALLOC, '64.0;34.09999847412;34.09999847412;35.0;36.0;74.0;74.0;34.0;74.0;36.0:41', '35;74', gg.TYPE_FLOAT, 1000, 'LSN-2SB (Fast Reload and Infinite Ammo)', '500034.59375', true)

    gg.toast('LSN-2SB ' .. green_emoji)
    if correct_dict[index] == red_emoji then
        correct_dict[index] = green_emoji
    end
end

function Vice(index, correct_dict)
    SearchRef(gg.REGION_C_ALLOC, '35.0;49.0;54.0:9', '54', gg.TYPE_FLOAT, 50, 'Vice (Infinit Ammo)', '10000', true)
    
    SearchRef(gg.REGION_C_ALLOC, '50034.0;130.0;35.0:9', '35', gg.TYPE_FLOAT, 50, 'Vice (Fire Rate)', '35.90000152588', true)
    
    gg.toast('Vice ' .. green_emoji)
    if correct_dict[index] == red_emoji then
        correct_dict[index] = green_emoji
    end
end

function RCF08(index, correct_dict)
    SearchRef(gg.REGION_C_ALLOC, '36.0;50.0;41.0:21', '36', gg.TYPE_FLOAT, 999, 'R.C.F.08 (Infinit Ammo)', '1000', true)

    SearchRef(gg.REGION_C_ALLOC, '95034.0;36.5:9', '36.5', gg.TYPE_FLOAT, 999, 'R.C.F.08 (Fire Rate)', '37.5', true)

    gg.toast('R.C.F.08 ' .. green_emoji)
    if correct_dict[index] == red_emoji then
        correct_dict[index] = green_emoji
    end
end

function VLI35(index, correct_dict)
    SearchRef(gg.REGION_C_ALLOC, '34.09999847412;35.0;69.0;64.0;34.0;98.0;43.0;57.0;34.95000076294:41', '35;64', gg.TYPE_FLOAT, 500, 'V.L.I.-35 (Infinit Ammo)', '10000', true)

    SearchRef(gg.REGION_C_ALLOC, '95034.0;84.0;36.20000076294;40.0:13', '36.20000076294', gg.TYPE_FLOAT, 500, 'V.L.I.-35 (Fire Rate)', '36.8', true)

    gg.toast('V.L.I.-35 ' .. green_emoji)
    if correct_dict[index] == red_emoji then
        correct_dict[index] = green_emoji
    end
end

function Spec38A(index, correct_dict)
    SearchRef(gg.REGION_C_ALLOC, '121.0F;34.79999923706F;64.0F', '34.79999923706', gg.TYPE_FLOAT, 100, 'Spec-38A (Fire Rate)', '35.5', true)
    
    SearchRef(gg.REGION_C_ALLOC, '59.0;154.0;124.0;39.0;36.0;37.5;64.0;35.0;54.0;35.0;64.0;34.0;49.0;66.0;42.0;60.0:93', '59.0', gg.TYPE_FLOAT, 1000, 'Spec-38A (Speed)', '40', true)

    Search(gg.REGION_C_ALLOC, '49;49;34;49:13', gg.TYPE_FLOAT, 9999, 'Spec-38A (Ammo)', '12050', true)

    Search(gg.REGION_C_ALLOC, '34.90000152588F;34.09999847412F;34.09999847412F;35:13', gg.TYPE_FLOAT, 9999, 'Spec-38A (Reload)', '40', true)

    Search(gg.REGION_C_ALLOC, '64;82;35;34;34;114;134:25', gg.TYPE_FLOAT, 9999, 'Spec-38A (Range + Damage)', '969', true)

    gg.toast('Spec-38A ' .. green_emoji)
    if correct_dict[index] == red_emoji then
        correct_dict[index] = green_emoji
    end
end

function HideArmAndGun(index, correct_dict)
    SearchRef(gg.REGION_C_ALLOC, '2000.0;0.00100000005:9', '0.00100000005', gg.TYPE_FLOAT, 1000, 'Hide Arms and Gun', '1000', true)
    
    gg.toast('Hide Arms and Gun ' .. green_emoji)
    if correct_dict[index] == red_emoji then
        correct_dict[index] = green_emoji
    end
end

function Underground(index, correct_dict)
    gg.setRanges(gg.REGION_C_ALLOC)
    if correct_dict[index] == red_emoji then
        correct_dict[index] = green_emoji
        gg.searchNumber('1.59999847412F; 1.200000004768F; 0.80000001192F: 512', gg.TYPE_FLOAT)
        gg.getResults(99999)
        gg.refineNumber('1.200000004768', gg.TYPE_FLOAT)
        gg.getResults(99999)
        gg.editAll('-1.200000004768', gg.TYPE_FLOAT)
        gg.clearResults()
        gg.toast('Underground ' .. green_emoji)
    else
        correct_dict[index] = red_emoji
        gg.searchNumber('-1.200000004768', gg.TYPE_FLOAT)
        gg.getResults(99999)
        gg.editAll('1.200000004768', gg.TYPE_FLOAT)
        gg.clearResults()
        gg.toast('Underground ' .. cross_emoji)
    end
end

function Fly(index, correct_dict)
    gg.setRanges(gg.REGION_C_ALLOC)
    if correct_dict[index] == red_emoji then
        correct_dict[index] = green_emoji
        -- gg.searchNumber('1.59999847412F; 1.200000004768F; 0.80000001192F: 512', gg.TYPE_FLOAT)
        -- gg.getResults(99999)
        gg.searchNumber('1.200000004768', gg.TYPE_FLOAT)
        gg.getResults(99999)
        gg.editAll('2.400000009536', gg.TYPE_FLOAT) -- 2.400000009536
        gg.clearResults()
        gg.toast('Fly ' .. green_emoji)
    else
        correct_dict[index] = red_emoji
        gg.searchNumber('2.400000009536', gg.TYPE_FLOAT)
        gg.getResults(99999)
        gg.editAll('1.200000004768', gg.TYPE_FLOAT) -- 2.400000009536
        gg.clearResults()
        gg.toast('Fly ' .. cross_emoji)
    end
end

function Maelstrom(index, correct_dict)
    -- SearchRef(gg.REGION_C_ALLOC, '35.0;233,377.0;233,568.0:45', '35' ,gg.TYPE_FLOAT, 1, 'Maelstrom (Fast Reload)', '200', true)

    SearchRef(gg.REGION_C_ALLOC, '36.0;233,377.0;233,568.0:241', '36' ,gg.TYPE_FLOAT, 1, 'Maelstrom (Fire Rate)', '333', true)

    SearchRef(gg.REGION_C_ALLOC, '51.0;233,377.0;233,568.0:41', '51', gg.TYPE_FLOAT, 1, 'Maelstrom (Ammo)', '420420420', true)

    gg.toast('Maelstrom ' .. green_emoji)
    if correct_dict[index] == red_emoji then
        correct_dict[index] = green_emoji
    end
end

function LuckySpin(index, correct_dict)
    Search(gg.REGION_C_ALLOC, '3D; 12D; 20D; 10D; 65D; 60D; 0D:93', gg.TYPE_DWORD, 1000, 'Lucky Spin', '1', true)
    gg.toast('Lucky Spin ' .. green_emoji)
    if correct_dict[index] == red_emoji then
        correct_dict[index] = green_emoji
    end
end

function MSG33(index, correct_dict)
    SearchRef(gg.REGION_C_ALLOC, '-2.64835626e-23;-1.0;40.0:65', '-2.64835626e-23', gg.TYPE_FLOAT, 1, 'MSG33 (Freeze)', '-5.39260972e-33', true)

    gg.toast('MSG33 ' .. green_emoji)
    if correct_dict[index] == red_emoji then
        correct_dict[index] = green_emoji
    end
end

function BSW77(index, correct_dict)
    SearchRef(gg.REGION_C_ALLOC, '154.0;284.0;484.0;89.0;38.0;44.0;233,287.0;233,536.0;41.0:221', '44', gg.TYPE_FLOAT, 100, 'BSW77 (Infinit Ammo)', '200', true)

    SearchRef(gg.REGION_C_ALLOC, '95,034.0;132.0;94.0;304.0;484.0;74.0;34.5;35.0;54.0;233,287.0;233,536.0:249', '35', gg.TYPE_FLOAT, 5, 'BSW77 (No Reload)', '99', true)

    SearchRef(gg.REGION_C_ALLOC, '95,034.0;132.0;35.20000076294;284.0;484.0;89.0;34.5:165', '35.20000076294', gg.TYPE_FLOAT, 100, 'BSW77 (Fire Rate)', '45.20000076294', true)

    gg.toast('BSW77 ' .. green_emoji)
    if correct_dict[index] == red_emoji then
        correct_dict[index] = green_emoji
    end
end

function Crosshair(index, correct_dict)
    gg.setRanges(gg.REGION_CODE_APP)
    if correct_dict[index] == red_emoji then
        correct_dict[index] = green_emoji
        gg.searchNumber('0.005', gg.TYPE_FLOAT)
        gg.getResults(1000)
        gg.editAll('0.00001', gg.TYPE_FLOAT)
        gg.clearResults()
        gg.toast('Crosshair ' .. green_emoji)
    else
        correct_dict[index] = red_emoji
        gg.searchNumber('0.00001', gg.TYPE_FLOAT)
        gg.getResults(1000)
        gg.editAll('0.005', gg.TYPE_FLOAT)
        gg.clearResults()
        gg.toast('Crosshair ' .. cross_emoji)
    end
end

function ShowAllWeapons(index, correct_dict)
    gg.setRanges(gg.REGION_C_ALLOC)
    if correct_dict[index] == red_emoji then
        correct_dict[index] = green_emoji
        gg.searchNumber('34', gg.TYPE_FLOAT)
        gg.getResults(10000)
        gg.editAll('35', gg.TYPE_FLOAT)
        gg.clearResults()
        gg.toast('Show All Weapons ' .. green_emoji)
    else
        correct_dict[index] = red_emoji
        gg.searchNumber('35', gg.TYPE_FLOAT)
        gg.getResults(10000)
        gg.editAll('34', gg.TYPE_FLOAT)
        gg.clearResults()
        gg.toast('Show All Weapons ' .. cross_emoji)
    end
end

function Buckshot(index, correct_dict)
    SearchRef(gg.REGION_C_ALLOC, '35.0F;54.0F;44.0F;34.0F;36.0F;59.0F;41.0F;43.0F:49', '35', gg.TYPE_FLOAT, 100, 'Buckshot (Fast Reload)', '1000', true)

    gg.toast('Buckshot ' .. green_emoji)
    if correct_dict[index] == red_emoji then
        correct_dict[index] = green_emoji
    end
end

function Judgement(index, correct_dict)
    SearchRef(gg.REGION_C_ALLOC, '35.0F;43.0F;44.0F;34.0F;223.0F;39.0F;49.0F;36.0F:37', '35', gg.TYPE_FLOAT, 100, 'Judgement (Fast Reload)', '1000', true)

    gg.toast('Judgement ' .. green_emoji)
    if correct_dict[index] == red_emoji then
        correct_dict[index] = green_emoji
    end
end

function DreadEye(index, correct_dict)
    SearchRef(gg.REGION_C_ALLOC, '34.5F;39.0F;59.0F;38.0F;35.0F;44.0F;54.0F;34.0F;36.0F;37.0F;34.90000152588F:77', '35', gg.TYPE_FLOAT, 100, 'Dread Eye (Fast Reload)', '1000', true)
    
    gg.toast('Dread Eye ' .. green_emoji)
    if correct_dict[index] == red_emoji then
        correct_dict[index] = green_emoji
    end
end

function Bosk3(index, correct_dict)
    SearchRef(gg.REGION_C_ALLOC, '13,034.0;35.0;233,297.0;233,541.0:249', '35', gg.TYPE_FLOAT, 10, 'Bosk3 (Fire Rate)', '36.7', true)

    gg.toast('Bosk3 ' .. green_emoji)
    if correct_dict[index] == red_emoji then
        correct_dict[index] = green_emoji
    end
end

function LAK(index, correct_dict)
    SearchRef(gg.REGION_C_ALLOC, '46.0;162.0;45.0;37.0;36.0;81.0;41.0:61', '46', gg.TYPE_FLOAT, 10, 'LAK (Unlimited Ammo)', '200', true)

    SearchRef(gg.REGION_C_ALLOC, '35.0;162.0;45.0;36.0;81.0;41.0:65', '35', gg.TYPE_FLOAT, 10, 'LAK (Fast Reload)', '99', true)

    SearchRef(gg.REGION_C_ALLOC, '34.70000076294;94.0;162.0;45.0;36.0;81.0;41.0:261', '34.70000076294', gg.TYPE_FLOAT, 10, 'LAK (Fire Rate)', '35.10000076294', true)

    gg.toast('LAK ' .. green_emoji)

    if correct_dict[index] == red_emoji then
        correct_dict[index] = green_emoji
    end
end

function KogV(index, correct_dict)
    Search(gg.REGION_C_ALLOC, '54.0F;52.0F;35.0F;64.0F;42.0F:33', gg.TYPE_FLOAT, 200, 'KogV (Fast Reload)', '1000', true)

    gg.toast('KogV ' .. green_emoji)
    if correct_dict[index] == red_emoji then
        correct_dict[index] = green_emoji
    end
end

function NoRecoil(index, correct_dict)
    gg.setRanges(gg.REGION_CODE_APP)
    gg.searchNumber('-0.001;-0.01', gg.TYPE_FLOAT)
    gg.getResults(99)
    gg.searchNumber('-0.001', gg.TYPE_FLOAT)
    gg.getResults(99)
    gg.editAll('-99999999999999999999999999', gg.TYPE_FLOAT)
    gg.clearResults()
    gg.searchNumber('-99999999999999999999999999;-0.01', gg.TYPE_FLOAT)
    gg.getResults(99)
    gg.searchNumber('-0.01', gg.TYPE_FLOAT)
    gg.getResults(99)
    gg.editAll('0', gg.TYPE_FLOAT)
    gg.clearResults()
    gg.setRanges(gg.REGION_CODE_APP)
    gg.searchNumber('-99999999999999999999999999', gg.TYPE_FLOAT)
    gg.getResults(99)
    gg.editAll('-0.001', gg.TYPE_FLOAT)
    gg.clearResults()
    gg.searchNumber('-99.99', gg.TYPE_FLOAT)
    gg.getResults(99)
    gg.editAll('-0.01', gg.TYPE_FLOAT)
    gg.clearResults()
    gg.toast('No Recoil ' .. green_emoji)
    if correct_dict[index] == red_emoji then
        correct_dict[index] = green_emoji
    end
end    

function Pistols2Freeze(index, correct_dict)
    SearchRef(gg.REGION_C_ALLOC, '60066;-1711271664;0;0;200:61', '-1711271664', gg.TYPE_DWORD, 1000, 'Pistols to Freeze', '-1981808624', true)

    gg.toast('Pistols to Freeze ' .. green_emoji)
    if correct_dict[index] == red_emoji then
        correct_dict[index] = green_emoji
    end
end

function Test(index, correct_dict)
    -- SearchRef(gg.REGION_C_ALLOC, '260,845D;66;-1,596,977,136D:9', '-1,596,977,136', gg.TYPE_DWORD, 1000, 'Spec38A to Maelstrom', '-821,817,312', true)

    gg.toast('Test Function ' .. green_emoji)
    if correct_dict[index] == red_emoji then
        correct_dict[index] = green_emoji
    end
end

function GrinderInSabre(index, correct_dict)
    SearchRef(gg.REGION_C_ALLOC, '65, 142D; 27D; -1,754,263,279D :9', '-1,754,263,279', gg.TYPE_DWORD, 24, 'Sabre to Grinder', '-1,052,503,520', true)
    gg.toast('Grinder in Sabre ' .. green_emoji)
    if correct_dict[index] == red_emoji then
        correct_dict[index] = green_emoji
    end
end

function GrinderInCompakt(index, correct_dict)
    SearchRef(gg.REGION_C_ALLOC, '2,606D; 0D; -1,874,849,519D :9', '-1,874,849,519D', gg.TYPE_DWORD, 24, 'Compakt to Grinder', '-1,052,503,520', true)
    gg.toast('Grinder in Compakt ' .. green_emoji)
    if correct_dict[index] == red_emoji then
        correct_dict[index] = green_emoji
    end
end

function MaskChange(index, float_value, correct_dict, mask_name)
    gg.setRanges(gg.REGION_C_ALLOC)
    gg.alert('Please go to Mask Settings and click on the Free Touchdown Mask from the Facebook Gift (6 Seconds Time)')
    CustomCountdown(6)
    gg.searchNumber('-6.00492967e-35', gg.TYPE_FLOAT)
    local t = gg.getResults(25)
    Safe = {}
    for i, v in ipairs(t) do
        if v.flags == gg.TYPE_FLOAT then
            Safe[v.address] = v.value
            -- gg.alert('Address: ' .. v.address .. ' | Value: ' .. v.value)
        end
    end
    -- gg.alert('Safe Table Items: ' .. Count_table_items(Safe))
    gg.alert('Please click on any other Mask (4 Seconds Time)')
    CustomCountdown(4)
    v = gg.getValues(t)
    AddressChanged = ''
    NewValue = ''
    for i, v in ipairs(v) do
        if v.flags == gg.TYPE_FLOAT then
            -- gg.alert('Address: ' .. v.address .. ' | Value: ' .. v.value .. ' | Safe Value: ' .. Safe[v.address])
            if Safe[v.address] ~= v.value then
                AddressChanged = v.address
                NewValue = v.value
            end
        end
    end
    -- gg.alert('Address Changed: ' .. AddressChanged)
    t = nil
    gg.clearResults()
    gg.searchNumber(NewValue, gg.TYPE_FLOAT)
    local n = gg.getResults(25)
    for i, v in ipairs(n) do
        if v.address == AddressChanged then
            v.name = mask_name .. ' (' .. v.value .. ')'
            v.value = float_value
            v.freeze = true
        end
    end
    gg.addListItems(n)
    n = nil
    v = nil
    gg.clearResults()
    gg.toast('Changed Touchdown Mask changed to ' .. mask_name ..  ' (' .. float_value .. ') ' .. green_emoji)

    -- if correct_dict[index] == red_emoji then
    --     correct_dict[index] = green_emoji
    -- end
end

function WeaponSwap(gun_to_swap, gun_to_swap_for)
    if gun_to_swap == gun_to_swap_for then
        gg.toast('Cant Swap' .. gun_to_swap .. ' for ' .. gun_to_swap_for)
    else
        -- if string.sub(var, -1)
        SearchRef(gg.REGION_C_ALLOC, weaponSwapDict[gun_to_swap_for], weaponSwapDict[gun_to_swap_for], gg.TYPE_DWORD, 24, gun_to_swap .. ' in ' .. gun_to_swap_for, weaponSwapDict[gun_to_swap], false)
        gg.toast(gun_to_swap .. ' in ' .. gun_to_swap_for .. ' ' .. green_emoji)
    end
end

function MrPeachyOnMap(index, correct_dict)
    gg.setRanges(gg.REGION_C_ALLOC)
    gg.searchNumber("1917649153", gg.TYPE_DWORD)
    gg.getResults(99)
    gg.alert('Total Mr. Peachy On Map ' .. gg.getResultsCount())
    gg.clearResults()
end

function Exit()
    gg.clearResults()
    gg.skipRestoreState()
    os.exit()
    gg.setVisible(true)
end

function HOME()
    kele0=1
    Main()
    gg.clearResults()
end

while(true)do
if gg.isVisible(true) then
    XGCK=1
    gg.setVisible(false)
    end
if XGCK==1 then
    Main()
    end
end
